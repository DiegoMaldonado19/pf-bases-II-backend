version: '3.9'

services:
  mongodb:
    image: mongo:7.0
    container_name: products-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - products-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: products-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - products-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./pf-bases-II-backend
      dockerfile: Dockerfile
    container_name: products-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./pf-bases-II-backend/src:/app/src
      - ./pf-bases-II-backend/data:/app/data
    networks:
      - products-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ./pf-bases-II-frontend
      dockerfile: Dockerfile
    container_name: products-frontend
    restart: unless-stopped
    ports:
      - "4200:80"
    environment:
      API_URL: http://localhost:3000
    networks:
      - products-network
    depends_on:
      - backend

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local

networks:
  products-network:
    driver: bridge